name: .NET

on:
  push:
    branches: [ "develop","main" ]
  pull_request:
    branches: [ "develop","main" ]

jobs:
  build-producer:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: cd RegionalProducer/RegionalProducer && dotnet restore
    - name: Build
      run: cd RegionalProducer/RegionalProducer && dotnet build --no-restore
    - name: Test
      run: cd RegionalProducer/RegionalProducer && dotnet test --no-build --verbosity normal
  build-regional-writer:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: cd RegionalWriter && dotnet restore
    - name: Build
      run: cd RegionalWriter && dotnet build --no-restore
    - name: Test
      run: cd RegionalWriter && dotnet test --no-build --verbosity normal

  build-city-data:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: cd CityData && dotnet restore
    - name: Build
      run: cd CityData && dotnet build --no-restore
    - name: Test
      run: cd CityData && dotnet test --no-build --verbosity normal
      
  build-regional-data:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: cd RegionalData && dotnet restore
    - name: Build
      run: cd RegionalData && dotnet build --no-restore
    - name: Test
      run: cd RegionalData && dotnet test --no-build --verbosity normal
  build-and-push:
    needs: [build-regional-data,build-city-data,build-regional-writer,build-producer]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout do código
      uses: actions/checkout@v3
    - name: Login no Azure
      uses: azure/login@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Login no ACR
      run: az acr login --name techchallengeregistry
    - name: Construir e enviar as imagens para o ACR
      run: |
          cd infra
          docker build -t techchallengeregistry.azurecr.io/citydata:latest -f ../CityData/Dockerfile ../CityData
          docker push techchallengeregistry.azurecr.io/citydata:latest

          docker build -t techchallengeregistry.azurecr.io/regionaldata:latest -f ../RegionalData/Dockerfile ../RegionalData
          docker push techchallengeregistry.azurecr.io/regionaldata:latest

          docker build -t techchallengeregistry.azurecr.io/regionalproducer:latest -f ../RegionalProducer/RegionalProducer/Dockerfile ../RegionalProducer/RegionalProducer
          docker push techchallengeregistry.azurecr.io/regionalproducer:latest

          docker build -t techchallengeregistry.azurecr.io/regionalwriter:latest -f ../RegionalWriter/Dockerfile ../RegionalWriter
          docker push techchallengeregistry.azurecr.io/regionalwriter:latest

  deploy-to-aks:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout do código
      uses: actions/checkout@v3
    - name: Login no Azure
      uses: azure/login@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Login no ACR
      run: az acr login --name techchallengeregistry
    - name: Configurar kubectl
      run: az aks get-credentials --resource-group TechChallenge --name TechChallengeCluster
    - name: Criar Secret do Kubernetes
      run: |
        kubectl create secret docker-registry acr-secret \
          --docker-server=techchallengeregistry.azurecr.io \
          --docker-username=${{ secrets.ACR_USERNAME }} \
          --docker-password=${{ secrets.ACR_PASSWORD }} \
          --docker-email=rm356475@fiap.com.br
    - name: Criar namespace monitoramento
      run: kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
    - name: Aplicar os manifests do Kubernetes
      run: kubectl apply -f k8s/app/
    - name: Implantar Grafana e Prometheus
      run: kubectl apply -f k8s/monitor/
